generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  firstName   String
  middleName  String?
  lastName    String
  gender      String
  dateOfBirth DateTime
  role        String
  phoneNumber String
  email       String  @unique
  password    String
  username    String  @unique
  address     String
  profilePic  String
  passChanged Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  documents           Document[]
  classes             Class[]             
  instructorUploads   InstructorUploads[] @relation("UserToInstructorUploads")
  rooms               Room[]              
  exams               Exam[]
  results             Result[]
  answers             Answer[]
  resetPass           ResetToken[]
}

model ResetToken {
  id     Int     @id @default(autoincrement())
  token  String  @unique
  expiry DateTime
  user   User    @relation(fields: [userId], references: [id])
  userId Int
}

model Exam {
  id                Int        @id @default(autoincrement())
  courseId          Int
  course            Course     @relation(fields: [courseId], references: [id], onDelete: SetNull)
  examCode          String     @unique
  examName          String
  duration          String
  examDate          DateTime
  numberOfQuestions Int
  userId            Int
  user              User       @relation(fields: [userId], references: [id], onDelete: SetNull)
  questions         Question[]
  results           Result[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Question {
  id              Int      @id @default(autoincrement())
  examId          Int      
  exam            Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  question        String
  choiceA         String
  choiceB         String
  choiceC         String
  choiceD         String
  correctAnswer   String
  answers         Answer[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Document {
  id            Int      @id @default(autoincrement())
  documentTitle String
  address       String   @unique
  userId        Int
  docId         Int
  user          User     @relation(fields: [userId], references: [id], onDelete: SetNull)
  docs           InstructorUploads @relation(fields: [docId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Course {
  id         Int    @id @default(autoincrement())
  name       String
  classes    Class[]  
  exams      Exam[] 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Class {
  id         Int   @id @default(autoincrement())
  name       String
  courseId   Int   
  userId     Int   
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  course     Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  rooms      Room[] 
}

model Room {
  id         Int    @id @default(autoincrement())
  name       String
  classId    Int    
  userId     Int    
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  class      Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  user       User   @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model InstructorUploads {
  id         Int    @id @default(autoincrement())
  fileName   String
  filePath   String
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: SetNull, name: "UserToInstructorUploads")
  docs       Document[]
}

model Result {
  id         Int    @id @default(autoincrement())
  result     Int
  examId     Int
  studentId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  published Boolean @default(false)

  exam       Exam    @relation(fields: [examId], references: [id], onDelete: SetNull)
  student    User    @relation(fields: [studentId], references: [id], onDelete: SetNull)
}

model Answer {
  id         Int    @id @default(autoincrement())
  answer     String
  questionId Int
  studentId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  student    User     @relation(fields: [studentId], references: [id], onDelete: SetNull)
}
